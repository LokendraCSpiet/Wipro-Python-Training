
1. Reversing Words in a Sentence
Write a function reverse_words that takes a string sentence as input and 
returns a string where the order of words in the sentence is reversed. 
You may assume that words are separated by a single space and 
that there are no leading or trailing spaces in the input string.
 
Task
Given a string sentence, reverse the order of words in the sentence.
 
Input Format
    Read sentence, a string representing the sentence.
  Constraints
    The sentence will contain at most 10^3 characters.

Output Format
    The function must return a string representing the reversed order of words in the input sentence.

Sample Input  : "hello world"
Sample Output : "world hello"
 
Explanation : The words "hello" and "world" are reversed in the sentence.
 
Test Cases 
Input	                            Expected Output
"hello world"	                    "world hello"
"python is awesome"	                "awesome is python"
"coding challenges are fun"	        "fun are challenges coding"


2. Maximum Product of Two Integers :
Write a function max_product that takes a list of integers nums as input and 
returns the maximum product that can be obtained by multiplying two distinct integers from the list.
 
Task:
Given a list of integers nums, find the maximum product that can be obtained by 
multiplying two distinct integers from the list.
 
Input Format
    Read nums, a list of integers.
 
Constraints
    The length of the list nums will be at most 10^3.
    Each element in the list nums will be an integer in the range [-1000, 1000].

Output Format
    The function must return an integer representing the maximum product of two distinct integers 
    from the input list.
 
Input  : [1, 2, 3, 4, 5]
Output : 20 [The maximum product is obtained by multiplying 5 and 4 (5 * 4 = 20)]
 
Test Cases
[1, 2, 3, 4, 5] = 20
[-10, -3, 5, 2, -7] = 70
[0, -1, -2, -3]	= 6



3. Word Frequency Calculation
Write a function word_frequency that takes a string text as input and returns a dictionary where the keys are unique words in the text, and the values are the frequencies of those words in the text. Treat uppercase and lowercase letters as equivalent.
 
Task
Given a string text, calculate the frequency of each word in the text.
 
Input Format
    Read text, a string representing the text.
 
Constraints
    The length of the text will be at most 10^3.
 
Output Format
    The function must return a dictionary where the keys are unique words in the text and the values are the frequencies of those words.
 
Input   : "Hello world hello"
Output  : {'hello': 2, 'world': 1}
 
Test Cases:
"Hello world hello" = {'hello': 2, 'world': 1}
"Python is awesome, isn't it?" = {'python': 1, 'is': 1, 'awesome': 1, "isn't": 1, 'it': 1}
"Programming is fun Python programming is awesome" = {'programming': 2, 'is': 2, 'fun': 1, 'python': 1, 'awesome': 1}